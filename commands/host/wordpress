#!/bin/bash

# https://ddev.readthedocs.io/en/stable/users/extend/custom-commands/#annotations-supported
## Description: Creates a complete WordPress including plugins and wp-cli packages
## Usage: wordpress [flags] [args]
## Example: "ddev wordpress" or "ddev wordpress -cliu" or "ddev wordpress -d"
## CanRunGlobally: true

#ddev-generated

# create hooks in each project to trigger things like templating rewrites, updating cloudflare tunnels etc...
# hooks:
#   post-start:
#     - exec: "simple command expression"
#     - exec: "ls >/dev/null && touch /var/www/html/somefile.txt"
#     - exec-host: "simple command expression"
#   post-import-db:
#     - exec: "drush uli"

# pre-start:
# Only exec-host tasks can run during pre-start because the containers are not yet running. See Supported Tasks below.
# post-start: Execute tasks after the project environment has started.
# pre-import-db
# post-import-db: Execute tasks before or after database import.
# pre-import-files
# post-import-files: Execute tasks before or after files are imported.
# pre-composer
# post-composer: Execute tasks before or after the composer command.
# pre-stop
# post-stop: Hooks into ddev stop. Execute tasks a
# pre-pause:
# post-pause:
# pre-config
# post-config
# pre-exec
# post-exec
# pre-pull
# post-pull
# pre-push
# post-push
# pre-snapshot
# post-snapshot
# pre-delete-snapshot
# post-delete-snapshot
# pre-restore-snapshot
# post-restore-snapshot: Execute as the name suggests.

create_ddev_project() {
    # local WPURL="$1"

    # ddev config --project-type=wordpress --web-environment-add="WP_ENVIRONMENT_TYPE=development,WPURL=$WPURL" --disable-settings-management=true --php-version=8.1

    # dont set WPURL because no longer doing the traefik stuff
    ddev config --project-type=wordpress --web-environment-add="WP_ENVIRONMENT_TYPE=development" --disable-settings-management=true --php-version=8.1

    # None of this needed, as can just set it with ddev config command. Keep around for future reference

    # # add WP_ENVIRONMENT_TYPE to config.yaml, so that wp-config-development.php is used going forward. Sets it to "development", regardless of what it was before.

    # # Remove any existing WP_ENVIRONMENT_TYPE entries and re-add it as development
    # yq e 'del(.web_environment[] | select(test("WP_ENVIRONMENT_TYPE"))) ' -i .ddev/config.yaml
    # yq e '.web_environment += ["WP_ENVIRONMENT_TYPE=development"]' -i .ddev/config.yaml

    # Add the WPURL entry, set to the value provided as the production URL that is stored in the DB. This will be used by Traefik Middleware to rewrite URLs in the HTML response to be relative paths, such that any URL can be used to access the site while maintaining URL in DB as production - keeps the database consistent and clean, without any search/replace mess
    # yq e 'del(.web_environment[] | select(test("WPURL"))) ' -i .ddev/config.yaml
    # yq e ".web_environment += [\"WPURL=$WPURL\"]" -i .ddev/config.yaml

    # yq e ".disable_settings_management = false" -i .ddev/config.yaml

    # set php to 8.1 because it has better compatibility with Wordpress
    # as of WP 6.6, php 8.2 is "compatible, with exceptions" while 8.3 has "beta support"
    # https://make.wordpress.org/core/handbook/references/php-compatibility-and-wordpress-versions/
    # yq e '.php_version = "8.1"' -i .ddev/config.yaml

    # dont need to do this now that I'm just injecting what's necessary into the existing wp-config.php - be it from an import or from a fresh install
    # rm -f ./wp-config*.php

    # copy our wp-config-envtype files to the project directory
    cp -f ~/.ddev/wordpress/wp-config-development.php ./wp-config-development.php
    cp -f ~/.ddev/wordpress/wp-config-production.php ./wp-config-production.php

    mv -f ~/wp-config.php wp-config-production.php        # rename the wp-config.php file to wp-config-production.php, overwriting the template one if it exists because this is an import
    cp -f ~/.ddev/wordpress/wp-config.php ./wp-config.php # add our custom wp-config.php loader

}

update_wp_config() {

    # check if there is a wp-config.php file in the project directory. If not, check if there's wp-config-sample.php and copy it to wp-config.php

    # # Find all wp-config.php files and echo their names
    # wp_config_files=$(find . -maxdepth 1 -type f -name "wp-config*.php")
    # for file in $wp_config_files; do
    #     echo "$file"
    # done

    # if [ ! -f "wp-config.php" ]; then
    #     if [ -f "wp-config-sample.php" ]; then
    #         # TODO: perhaps change this to use `wp config create`
    #         mv wp-config-sample.php wp-config.php
    #     else
    #         echo "No wp-config.php found in the project directory. Creating new one."
    #         ddev exec wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db
    #     fi
    # fi

    if [ -f "wp-config.php" ]; then

        # check if the WP_ENVIRONMENT_TYPE check and selection mechanism is already in the wp-config.php file
        # if it is, then don't add it again
        # look for "Dynamic site configuration depending on the environment type" in the file
        if ! grep -q "Dynamic site configuration depending on the environment type" wp-config.php; then

            # insert the WP_ENVIRONMENT_TYPE check and selection mechanism into the top of wp-config.php
            # this will allow for the existing or default/stock-installed wp-config.php to be used, but for ddev-specific constants to override where necessary
            code_to_insert=$(
                cat <<'EOF'

// wp-config-ddev.php not needed

/*
Dynamic site configuration depending on the environment type.

Requires/includes wp-config-{WP_ENVIRONMENT_TYPE}.php if we're not in production, to pre-emptively override the production defaults below

DDEV sets WP_ENVIRONMENT_TYPE to "development" by default and has created a wp-config-development.php file adjacent to wp-config.php.

If you would like to set other environment configs, you can set WP_ENVIRONMENT_TYPE to "local" or "staging" in your project's .ddev/config.yaml's web_environment parameter. Then create a commensurate wp-config-{WP_ENVIRONMENT_TYPE}.php file to be loaded in that environment.

*/

$env_type = getenv("WP_ENVIRONMENT_TYPE") ?: "production";

if ($env_type != "production" ) {
    $environment_settings = dirname(__FILE__) . "/wp-config-$env_type.php";
    if (is_readable($environment_settings)){
        require_once($environment_settings);
    } else {
        // exit the request until the environment_type and config files are set up appropriately
        
        http_response_code(500);
        echo("No $environment_settings file found. Look at wp-config.php and create a wp-config-$env_type.php file, and set the WP_ENVIRONMENT_TYPE.");
        exit();
    }
}
EOF
            )

            # Create a temporary file with the code to be inserted
            temp_file=$(mktemp)
            echo "$code_to_insert" >"$temp_file"

            # Insert the code into wp-config.php after the opening <?php tag
            sed -i "/<?php/r $temp_file" wp-config.php

            # Clean up the temporary file
            rm "$temp_file"

            # add defined()|| to the beginning of each define() statement in wp-config.php so that the constants are not redefined if they already exist in other environment config files
            sed -i -E "/^\s*define\s*\(\s*'DB_(NAME|USER|PASSWORD|HOST)'\s*,\s*['\"][^'\"]*['\"]\s*\)\s*;/ s/^\s*define\s*\(\s*'([^']*)'\s*,\s*['\"]([^'\"]*)['\"]\s*\)\s*;/defined('\1') || define('\1', '\2');/" wp-config.php

            # not needed now that only targeting specific constants
            # delete any line that contains 'put your unique phrase here'
            #sed -i '/put your unique phrase here/d' wp-config.php

        fi

        # Generate new salts
        ddev exec wp config shuffle-salts

        # check if wp_siteurl and wp_home are set in the wp-config.php file, and delete them if so

        # Remove lines containing WP_SITEURL and WP_HOME using sed
        sed -i '/WP_SITEURL/d' wp-config.php
        sed -i '/WP_HOME/d' wp-config.php

    fi

    # # TODO: Need to extract this so that the values are passed in as arguments
    # # Declare an associative array
    # declare -A replacements=(
    #     ["{{ \$config.DatabaseName }}"]="db"
    #     ["{{ \$config.DatabaseUsername }}"]="db"
    #     ["{{ \$config.DatabasePassword }}"]="db"
    #     ["{{ \$config.DbCharset }}"]="utf8mb4"
    #     ["{{ \$config.DbCollate }}"]=""
    #     ["{{ \$config.AbsPath }}"]="/var/www/html"
    # )

    # file1="./wp-config.php"
    # file2="./wp-config-development.php"

    # # Convert associative array to positional parameters
    # args=()
    # for key in "${!replacements[@]}"; do
    #     args+=("$key" "${replacements[$key]}")
    # done

    # # Perform replacements
    # sed_replace "$file1" "${args[@]}"
    # sed_replace "$file2" "${args[@]}"

    echo "
wp-config.php updated."
}

process_wp_config() {
    # get environment type passed in
    local env_type="$1"

    ddev exec wp config shuffle-salts --config-file="wp-config-$env_type.php"
}

update_traefik_config() {
    mkdir -p ./.ddev/traefik && cp -f ~/.ddev/wordpress/dynamic_config.middlewares.yaml ./.ddev/traefik/dynamic_config.middlewares.yaml

    # TODO: probably should do something that copies and overwrites template from global directory to the current project directory, so that it can update the WPURL value if it was changed after being initially set

    local WPURL
    WPURL=$(yq e '.web_environment[] | select(. == "WPURL=*")' .ddev/config.yaml | sed 's/WPURL=//')

    # Declare an associative array
    declare -A replacements=(
        ["{{ \.App.Name }}"]=$(basename "$(pwd)")
        ["{{ WPURL }}"]=$WPURL
    )

    file1="./.ddev/traefik/dynamic_config.middlewares.yaml"

    # Convert associative array to positional parameters
    args=()
    for key in "${!replacements[@]}"; do
        args+=("$key" "${replacements[$key]}")
    done

    # Perform replacements
    sed_replace "$file1" "${args[@]}"

    echo "Traefik config updated."
}

sed_replace() {
    local targetFile="$1"
    shift
    declare -A arr

    while (($#)); do
        key="${1//[\'\"]/}"
        value="${2//[\'\"]/}"

        # Check if key is non-empty
        if [[ -n "$key" ]]; then
            arr[$key]="$value"
        fi

        shift 2
    done

    for key in "${!arr[@]}"; do
        sed -i "s|$key|${arr[$key]}|g" "$targetFile"
    done
}

prompt_for_input() {
    local prompt="$1"
    local var_name="$2"
    local default_value="$3"
    while true; do
        read -r -p "$prompt (default: $default_value): " input
        if [ -z "$input" ]; then
            if [ -z "$default_value" ]; then
                echo "$prompt is required."
            else
                eval "$var_name=\$default_value"
                break
            fi
        else
            eval "$var_name=\$input"
            break
        fi
    done
}

download_install_wp() {

    WP_TITLE="$CURRENT_DIR"
    WPURL="$CURRENT_DIR.ddev.site"
    WP_ADMIN_USER="admin"
    WP_ADMIN_PASSWORD="1357531"

    while true; do
        echo $'\nPlease enter site details. Press Ctrl+C at any time to cancel this command completely.\n'
        prompt_for_input "Site Title" WP_TITLE "$WP_TITLE"
        prompt_for_input "Site Development URL ***use a real subdomain to serve it publicly via Cloudflare Tunnels***" WPURL "$WPURL"
        prompt_for_input "Admin User" WP_ADMIN_USER "$WP_ADMIN_USER"
        prompt_for_input "Admin Password" WP_ADMIN_PASSWORD "$WP_ADMIN_PASSWORD"
        WP_ADMIN_EMAIL="$CURRENT_DIR@$WPURL"
        prompt_for_input "Admin Email" WP_ADMIN_EMAIL "$WP_ADMIN_EMAIL"

        echo $'\nYou have entered the following details:\n'
        echo "Site Title: $WP_TITLE"
        echo "Site Production URL: $WPURL"
        echo "Admin User: $WP_ADMIN_USER"
        echo "Admin Password: $WP_ADMIN_PASSWORD"
        echo "Admin Email: $WP_ADMIN_EMAIL"

        read -r -p $'\nAre these details correct? (Y/n): ' confirmation

        if [ -z "$confirmation" ]; then
            confirmation="yes"
        fi

        case ${confirmation,,} in
        y | yes) break ;;
        n | no) echo -e "\nLet's try again." ;;
        *) echo "Please answer yes or no." ;;
        esac
    done

    echo "
Download, Create and Install a fresh new WordPress..."

    # create_ddev_project $WPURL
    # create_ddev_project
    ddev config --project-type=wordpress --web-environment-add="WP_ENVIRONMENT_TYPE=development" --disable-settings-management=true --php-version=8.2

    cp -f ~/.ddev/wordpress/wp-config-development.php ./wp-config-development.php
    cp -f ~/.ddev/wordpress/wp-config-production.php ./wp-config-production.php
    cp -f ~/.ddev/wordpress/wp-config.php ./wp-config.php

    # mv -f ~/wp-config.php wp-config-production.php # rename the wp-config.php file to wp-config-production.php, overwriting the template one if it exists because this is an import

    # start project container so that wp-cli can be used to set things up
    ddev restart

    ## download and install wordpress
    ddev exec wp core download

    #set up our wp-config.php files
    # update_wp_config
    # process_wp_config production
    # process_wp_config development
    ddev exec wp config shuffle-salts --config-file="wp-config-production.php"
    ddev exec wp config shuffle-salts --config-file="wp-config-development.php"

    # install WP
    ddev exec wp core install --url=$WPURL --title=$WP_TITLE --admin_user=$WP_ADMIN_USER --admin_password=$WP_ADMIN_PASSWORD --admin_email=$WP_ADMIN_EMAIL --skip-email

    # replace template placeholders in traefik dynamic config
    # dont use this anymore - simply impossible to do relative paths or rewrite hostname. just change db url
    #update_traefik_config

    ## empties a site of its content (posts, comments, terms, and meta)
    ddev exec wp site empty --uploads --yes

    ## delete all default plugins
    ddev exec wp plugin delete --all

    ## change permalinks
    ddev exec wp option update permalink_structure '/%postname%/'

    ## install and activate plugins
    if [ -n "$WP_DDEV_PLUGINS" ]; then
        ddev exec wp plugin install "$WP_DDEV_PLUGINS" --activate
    fi

    ## after installing all plugins, update the language
    if [ -n "$WP_DDEV_LOCALE" ]; then
        ddev exec wp language plugin install --all "$WP_DDEV_LOCALE"
    fi

    if [ -n "$DO_WP_FLAGS_CLIP" ]; then
        ## install wp-cli packages
        ddev exec wp package install "$WP_DDEV_CLI_PACKAGES"
    fi

    #  not needed now that we're not using traefik
    #     echo "************************************************************

    # Restarting DDEV Project now to complete the process

    # ************************************************************"

    #     ddev restart
}

# function to prompt for a new dev URL and then search/replace the production URL with the new dev URL in the DB. Also set ddev config.yaml fqdns to the new dev URL
update_url() {
    # get the production URL from the DB
    DBURL=$(ddev exec wp option get siteurl 2>&1 | tail -n 1)
    if [[ $? -ne 0 ]]; then
        echo "Error: Failed to establish a connection. Please investigate the wp-config.php file for potential issues."
        echo "Details: $DBURL"
        exit 1
    fi

    if [[ $DBURL != http* ]]; then
        echo "Error: Invalid URL"
        exit 1
    fi
    #strip scheme if it exists
    DBURL=$(echo $DBURL | sed 's|http[s]*://||')

    prompt_for_input "
Enter Previous Site URL: " DBURL "$DBURL"

    # get the production URL from the user
    prompt_for_input "
Enter New Dev Site URL ***use a real subdomain to serve it publicly via Cloudflare Tunnels***" WPURL "$CURRENT_DIR.ddev.site"

    #strip scheme if it exists
    WPURL=$(echo $WPURL | sed 's|http[s]*://||')
    #strip scheme from the url
    # search/replace the production URL with the WPURL in the DB, replacing http and https with https
    echo "
Updating URL in the database from $DBURL to $WPURL..."

    # this doesnt work if tables doesnt have a primary key, column has BLOB type, and other issues
    # ddev exec wp search-replace "https://$DBURL" "https://$WPURL" --all-tables --precise --recurse-objects
    # ddev exec wp search-replace "http://$DBURL" "https://$WPURL" --all-tables --precise --recurse-objects

    # export db to sql file
    echo "
Exporting DB to SQL file..."
    ddev export-db --file="db-urlchange.sql" --gzip=false

    echo "
Replacing URL in SQL file..."
    # use ~/.ddev/wordpress/go-search-replace to replace the URL in the DB
    ~/.ddev/bin/go-search-replace "https://$DBURL" "https://$WPURL" <db-urlchange.sql >db-urlchange.sql.tmp
    ~/.ddev/bin/go-search-replace "http://$DBURL" "https://$WPURL" <db-urlchange.sql.tmp >db-urlchange.sql

    # import the updated SQL file back into the DB
    echo "
Importing updated SQL file..."
    ddev import-db --file="db-urlchange.sql"
    rm db-urlchange.sql db-urlchange.sql.tmp

    echo "
Updating URL complete."
    # update the WPURL in the ddev config.yaml file
    ddev config --additional-fqdns="$WPURL"

    echo "
************************************************************

Restarting DDEV Project now to complete the URL Update Process

************************************************************
"
    ddev redis-flush
    ddev restart
}

import_wp() {

    # First check if any SQL files are in the current directory. If not, bail.

    sql_files=$(find . -maxdepth 1 -type f -name "*.sql*")
    if [ -z "$sql_files" ]; then
        echo "
No SQL files found in the current directory. Please place your database backup file in the wordpress root directory and try again."
        exit 0
    fi

    # if there's a ddev project directory, prompt them to either delete it or stop the process and decide what to do
    if [ -d ".ddev" ]; then
        while true; do
            read -r -p $'\n A .ddev directory already exists in this directory. Do you want to delete it and start a fresh project here or just update the config with a new name? (y/N): ' delete_ddev
            if [ -z "$delete_ddev" ]; then
                delete_ddev="no"
            fi

            case ${delete_ddev,,} in
            y | yes)
                # stop and remove the current ddev project if it exists in ~/.ddev/project_list.yaml
                rm -rf .ddev/

                # create_ddev_project
                ddev config --project-type=wordpress --web-environment-add="WP_ENVIRONMENT_TYPE=development" --disable-settings-management=true --php-version=8.2
                break
                ;;
            n | no)
                # get name from .ddev/config.yaml
                OLD_PROJECT=$(yq e '.name' .ddev/config.yaml)

                # find and recursively remove any files that have OLD_PROJECT in the name. Especially targeting .ddev/traefik
                find ./.ddev -type f -name "*$OLD_PROJECT*" -exec rm -f {} \;

                ddev stop --unlist $CURRENT_DIR
                # rm .ddev/config.yaml
                # just update the config with what's needed
                ddev config --project-type=wordpress --web-environment-add="WP_ENVIRONMENT_TYPE=development" --disable-settings-management=true --php-version=8.2 --additional-fqdns="" --additional-hostnames="" --project-name=$CURRENT_DIR
                break
                ;;
            *) echo -e $'\nPlease answer yes or no.' ;;
            esac
        done
    fi

    # Create copy of wp-config.php as wp-config-development.php and rename original to wp-config-production.php
    cp -n wp-config.php wp-config-development.php
    mv -n wp-config.php wp-config-production.php
    cp -f ~/.ddev/wordpress/wp-config.php wp-config.php

    #remove everything after `That's all, stop editing!` line in both wp-config files
    sed -i '/That.*all.*stop.*editing/q' wp-config-development.php
    sed -i '/That.*all.*stop.*editing/q' wp-config-production.php

    ddev start

    ddev exec wp config set DB_HOST db --config-file="wp-config-development.php"
    ddev exec wp config set DB_NAME db --config-file="wp-config-development.php"
    ddev exec wp config set DB_USER db --config-file="wp-config-development.php"
    ddev exec wp config set DB_PASSWORD db --config-file="wp-config-development.php"
    ddev exec wp config set WP_DEBUG true --config-file="wp-config-development.php"
    ddev exec wp config set WP_DEBUG_LOG true --config-file="wp-config-development.php"
    ddev exec wp config set WP_DEBUG_DISPLAY false --config-file="wp-config-development.php"

    # start the project so that wp-cli can be used to set things up
    ddev restart
    ddev import-db --file="$sql_files"
    echo "
SQL files imported to DDEV Project"

    # update the WPURL in the DB and ddev config.yaml
    update_url
}

# TODO: tidy this up to reflect actual addon commands and flags
show_help() {
    echo "Creates a complete WordPress including plugins and wp-cli packages"
    echo ""
    echo "Usage:"
    echo "  wordpress [flags]"
    echo ""
    echo "Examples:"
    echo "ddev wordpress"
    echo "ddev wordpress -cliu -clip -wpd"
    echo ""
    echo "Flags:"
    echo "  -cliu, --cli-update     Updates WP-CLI to the latest release"
    echo "  -clip, --cli-packages   Installs a WP-CLI package"
    echo "  -d, --delete            Delete the old WordPress (without additional demand)"
    echo "  -no, --no-install       There is no installation of WordPress"
    echo "  -wpd, --wp-debug        Additional debug variables are set during the installation"
    echo " "
}

CURRENT_DIR=$(basename "$(pwd)")
main() {

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
        -h | --help)
            show_help
            exit 0
            ;;
        # install | import | wpconfig | traefik )
        install | import | wpconfig | updateurl)
            command="$1"
            shift
            ;;
        *)
            show_help
            exit 1
            ;;
        esac
    done

    # Check if a command was provided
    if [ -z "$command" ]; then
        show_help
        exit 1
    fi

    # Execute the command
    case "$command" in
    install)
        download_install_wp
        ;;
    import)
        import_wp
        ;;
    wpconfig)
        update_wp_config
        ;;
    updateurl)
        update_url
        ;;
    *)
        show_help
        exit 1
        ;;
    esac
}

main "$@"

# DO_WP_FLAGS_CLIP=false
# DO_WP_FLAGS_WPD=false
# DO_WP_INSTALL=true

# while :; do
#     case ${1:-} in
#          -h|-\?|--help)
#             show_help
#             exit
#              ;;
#          -cliu|--cli-update)
#             echo "Updates the WP-CLI..."
#             sudo wp cli update --stable --yes
#             echo " "
#              ;;
#          -clip|--cli-packages)
#             DO_WP_FLAGS_CLIP=true
#              ;;
#          -d|--delete)
#             DO_WP_INSTALL=false
#             echo "Delete the old WordPress..."
#             mysql -e 'DROP DATABASE IF EXISTS db; CREATE DATABASE db;'
#             rm -r /var/www/html/*
# 			echo "Done with deleting!"
#             echo " "
#              ;;
#          -no|--no-install)
#             DO_WP_INSTALL=false
#              ;;
#          -wpd|--wp-debug)
#             DO_WP_FLAGS_WPD=true
#              ;;
#          --)              # End of all options.
#             shift
#             break
#              ;;
#          -?*)
#             printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
#              ;;
#          *)               # Default case: No more options, so break out of the loop.
#             break
#     esac7

#     shift
#  done

# if $DO_WP_INSTALL; then
#     wp_download_create_install
# fi
